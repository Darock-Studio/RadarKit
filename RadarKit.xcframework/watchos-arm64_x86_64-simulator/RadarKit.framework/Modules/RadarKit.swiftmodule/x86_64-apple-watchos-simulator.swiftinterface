// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-watchos9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RadarKit
import Combine
import CommonCrypto
import Foundation
import MarkdownUI
import OSLog
import PhotosUI
@_exported import RadarKit
@_exported import RadarKitCore
import Swift
@_exported import SwiftUI
import WatchConnectivity
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor @preconcurrency public struct RKFeedbackView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(projName: Swift.String, gatherAppdiagnose: Swift.Bool = true, showNews: Swift.Bool = true, showUnderstandStatus: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8RadarKit14RKFeedbackViewV4bodyQrvp", 0) __
}
@available(iOS, unavailable)
public func radarPrepareForRemoteAppdiagnose()
extension RadarKit.RKFeedbackView {
  @_Concurrency.MainActor @preconcurrency public func radarFAQView<T>(_ view: T) -> RadarKit.RKFeedbackView where T : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func radarTitleInputSample(_ key: SwiftUICore.LocalizedStringKey) -> RadarKit.RKFeedbackView
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func radarTitleInputSample(_ key: Swift.String) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarAttachmentSelector<T>(@SwiftUICore.ViewBuilder _ view: @escaping (@escaping (Swift.String, Swift.String) -> Swift.Void) -> T) -> RadarKit.RKFeedbackView where T : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func radarAdditionalData(_ data: [Swift.String : Swift.String]) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarTipper(_ tipper: @escaping (Swift.String, Swift.String) -> Swift.Void) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarOnNewFeedbackAppear(_ action: @escaping () -> Swift.Void) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarMessageHiddenKeys(_ keys: [Swift.String]) -> RadarKit.RKFeedbackView
  @available(*, deprecated, message: "Markdown render is now embedded in RadarKit natively, this modifier no longer makes sense.")
  @_Concurrency.MainActor @preconcurrency public func radarMessageMarkdownRender<T>(@SwiftUICore.ViewBuilder _ render: @escaping (Swift.String) -> T) -> RadarKit.RKFeedbackView where T : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func radarIssuePlaces<T>(@SwiftUICore.ViewBuilder _ places: @escaping () -> T) -> RadarKit.RKFeedbackView where T : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public func radarConstantTags(_ tags: [RadarKit.RKFeedbackTag]) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarAppdiagnoseDataProcessor(_ processor: @escaping (inout [Swift.String : Any]) -> Swift.Void) -> RadarKit.RKFeedbackView
  @_Concurrency.MainActor @preconcurrency public func radarSuggsetResolver(_ resolver: any RadarKit.RKSuggestResolver.Type) -> RadarKit.RKFeedbackView
}
public struct RKFeedbackTag : Swift.Equatable {
  public let name: Swift.String
  public let color: SwiftUICore.Color
  public init(name: Swift.String, color: SwiftUICore.Color)
  public static func == (lhs: RadarKit.RKFeedbackTag, rhs: RadarKit.RKFeedbackTag) -> Swift.Bool
}
extension RadarKitCore.RKCFileStatus {
  public var localizedName: SwiftUICore.LocalizedStringKey {
    get
  }
  public var representingSymbol: Swift.String {
    get
  }
  public var representingColor: SwiftUICore.Color {
    get
  }
  public var representingLabel: some SwiftUICore.View {
    get
  }
}
public protocol RKSuggestResolver {
  static func suggestView(for place: Swift.String) -> SwiftUICore.AnyView
}
extension RadarKit.RKFeedbackView : Swift.Sendable {}
